# Utilisation de Terraform
## Configurer un groupe de ressources
https://learn.hashicorp.com/tutorials/terraform/azure-build?in=terraform/azure-get-started

>Dans un fichier main.tf
````
#Configure the Azure provider
terraform {
required_providers {
azurerm =  {
source = "hashicorp/azurerm"
version = "~> 2.65"
}
}
required_version =  ">= 0.14.9"
}
provider  "azurerm" {
features {}
}
resource  "azurerm_resource_group"  "rg-robin" {
name  =  "rg-robin"
location  =  "westeurope"
}
````

## Créer une ressource théorie
````
#Create virtual network
resource  "azurerm_nom_de_la_ressource_dans_le_ressource_manager"  "nom_de_la_ressource_pour_terraform" {
````
>La première partie avant l'accolade correspond à la création de l'objet Terraform
````
name  =  "robin-network"
address_space  =  ["10.0.0.0/16"]
location  =  "westeurope"
resource_group_name  =  azurerm_resource_group.rg-robin.name
````
>L'intérieur du crochet est réservé à Azure, un définit un certain nombre de caractéristique sur notre ressource
````
tags  =  {
environment = "robin-network"
}
}
````
>Les tags vont permettre de pointer vers un utilisateur précis dans les logs par exemple

## Coupler avec son compte Azure
````
az login
````
>Cliquer sur le lien puis entrer le code 
Se connecter sur notre compte Azure
## Lancer Terraform
````
terraform init
````
>Initialise Terraform
````
terraform plan
````
>Créé un plan d'éxécution
````
terraform validate
````
>vérifie que le fichier .tf ne contient pas d'erreurs
````
terraform apply - auto-approve
````
>applique le fichier main.tf 
auto-approve permet d'eviter la confirmation
````
terraform destroy - auto-approve
````
>Détruit les ressources du fichier main.tf
# Configurer une VM Linux
https://docs.microsoft.com/en-us/azure/developer/terraform/create-linux-virtual-machine-with-infrastructure
## On a déjà créé un groupe de ressources (cf partie 1)
````
#Configure the Azure provider
terraform {
required_providers {
azurerm =  {
source = "hashicorp/azurerm"
version = "~> 2.65"
}
}
required_version =  ">= 0.14.9"
}
provider  "azurerm" {
features {}
}
resource  "azurerm_resource_group"  "rg-robin" {
name  =  "rg-robin"
location  =  "westeurope"
}
````
## On créé un réseau virtuel
````
#Create virtual network
resource  "azurerm_virtual_network"  "robin-network" {
name  =  "robin-network"
address_space  =  ["10.0.0.0/16"]
location  =  "westeurope"
resource_group_name  =  azurerm_resource_group.rg-robin.name
tags  =  {
environment = "robin-network"
}
}
````

## On créé un sous réseau dans le réseau principal
````
#Create subnet
resource  "azurerm_subnet"  "robin-subnet" {
name  =  "robin-subnet"
resource_group_name  =  azurerm_resource_group.rg-robin.name
virtual_network_name  =  azurerm_virtual_network.robin-network.name
address_prefixes  =  ["10.0.1.0/24"]
}
````
>on associe le subnet et le net en pointant vers robin-network
## On créé un IP public 
````
#Create public IPs
resource  "azurerm_public_ip"  "robin-ip" {
name  =  "robin-ip"
location  =  "westeurope"
resource_group_name  =  azurerm_resource_group.rg-robin.name
allocation_method  =  "Dynamic"
tags  =  {
environment = "robin-ip"
}
````
## On met en place des règles de sécurité
````
}
#Create Network Security Group and rule
resource  "azurerm_network_security_group"  "robin-nsg" {
name  =  "robin-nsg"
location  =  "westeurope"
resource_group_name  =  azurerm_resource_group.rg-robin.name
security_rule {
name  =  "SSH"
priority  =  1001
direction  =  "Inbound"
access  =  "Allow"
protocol  =  "Tcp"
source_port_range  =  "*"
destination_port_range  =  "22"
source_address_prefix  =  "*"
destination_address_prefix  =  "*"
}
tags  =  {
environment = "robin-nsg"
}
}
````
>On peut traduire par : concernant les connexion ssh entrantes (Inbound), elles sont autorisées via le protocole TCP pour toutes les sources quelques soit leur port d'entrée sur le port 22 du serveur virtuel.

## On crée une interface réseau
````
#Create network interface
resource  "azurerm_network_interface"  "robin-nic" {
name  =  "robin-nic"
location  =  "westeurope"
resource_group_name  =  azurerm_resource_group.rg-robin.name
ip_configuration {
name  =  "robin-icconfig"
subnet_id  =  azurerm_subnet.robin-subnet.id
private_ip_address_allocation  =  "Dynamic"
public_ip_address_id  =  azurerm_public_ip.robin-ip.id
}
tags  =  {
environment = "robin-nic"
}
````
>On créé une carte réseau virtuelle (network interface card)
On l'associe à un sous réseau et on alloue dynamiquement les adresses ip privées au sein du réseau 
On lui associe l'adresse ip publique qu'on a crée précédemment 

## Connecter le groupe de sécurité à l'interface réseau
````
}
#Connect the security group to the network interface
resource  "azurerm_network_interface_security_group_association"  "example" {
network_interface_id  =  azurerm_network_interface.robin-nic.id
network_security_group_id  =  azurerm_network_security_group.robin-nsg.id
}
````
>On exprime le fait que l'id de l'interface est celui de la carte réseau. C'est elle qui fera le lien entre l'adresse publique et l'adresse privée
On dit que les règles de sécurité sont celles du network security group
## On créé un espace de stockage pour stocker les logs 
````
#Generate random text for a unique storage account name
resource  "random_id"  "randomId" {
keepers  =  {
#Generate a new ID only when a new resource group is defined
resource_group = azurerm_resource_group.rg-robin.name
}
 byte_length  =  8
}
#Create storage account for boot diagnostics
resource  "azurerm_storage_account"  "robin-storage" {
name  =  "diag${random_id.randomId.hex}"
resource_group_name  =  azurerm_resource_group.rg-robin.name
location  =  "westeurope"
account_tier  =  "Standard"
account_replication_type  =  "LRS"
tags  =  {
environment = "robin-storage"
}
}
````
> On crée un nom diag543356 dans lequel on stockera les logs

## On crée une clef SSH pour pouvoir se loguer directement 
````
#Create (and display) an SSH key
resource  "tls_private_key"  "robin-ssh" {
algorithm  =  "RSA"
rsa_bits  =  4096
}
output  "tls_private_key" {
value  =  tls_private_key.robin-ssh.private_key_pem
sensitive =  true
}
````
>On crée une clef SSH dont on stockera la clef publique dans le serveur ("authorized key")
On envoie en output la clef privée au client pour qu'il puisse se connecter au serveur avec sa clef privée
## On crée une machine virtuelle Linux
````
#Create virtual machine
resource  "azurerm_linux_virtual_machine"  "robin-vm" {
name  =  "robin-vm"
location  =  "westeurope"
resource_group_name  =  azurerm_resource_group.rg-robin.name
network_interface_ids  =  [azurerm_network_interface.robin-ic.id]
size  =  "Standard_DS1_v2"
os_disk {
name  =  "myOsDisk"
caching  =  "ReadWrite"
storage_account_type  =  "Premium_LRS"
}
source_image_reference {
publisher  =  "Canonical"
offer  =  "UbuntuServer"
sku  =  "18.04-LTS"
version  =  "latest"
}
computer_name  =  "robin-vm"
admin_username  =  "robin"
disable_password_authentication  =  true
admin_ssh_key {
username  =  "robin"
public_key  =  tls_private_key.robin-ssh.public_key_openssh
}
boot_diagnostics {
storage_account_uri  =  azurerm_storage_account.robin-storage.primary_blob_endpoint
}
tags  =  {
environment = "robin-vm"
}
}
````
# Lancer les services
## Appliquer les ressources
````
terraform apply 
````
## Récupérer la clef privée 
````
terraform output
````
Donne la clef privée que l'on peux rediriger dans un fichier nommé private_key
````
terraform output -raw tls_private_key > private_key
````
On peux faire un sécurisation de la private key en mettant le fichier seulement en lecture pour l'utiliateur via 
````
chmod 400 private_key
````
## Connexion en ssh sur le serveur Azure
````
ssh -i private_key user@ip-public
````
>Attention, si jamais la clef privée n'est pas dans le cache on peut la charger via 
````
eval `ssh-agent -s
ssh-add ~/private_key
````
## Configurer le serveur distant Azure via Ansible 
````
ansible-playbook playbook.yml -i adresse_ip_publique, -u user 
````
>Va lancer les configuration du fichier playbook si la clef privée est chargée dans le cache
On peut aussi configurer le fichier inventory pour se passer des arguments de fin de ligne
